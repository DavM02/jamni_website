{"version":3,"file":"static/js/149.ff05aea2.chunk.js","mappings":"uLA+FA,QAxFA,SAA2BA,GACvB,MAAMC,GAAYC,EAAAA,EAAAA,IAAeC,GAAUA,EAAMC,cACzCA,WAAYC,EAAQ,SAAEC,IAAaC,EAAAA,EAAAA,MACrC,YAAEC,IAAgBC,EAAAA,EAAAA,MAClB,UAAEC,IAAcD,EAAAA,EAAAA,KAChBE,EAAQL,EAASM,MAAMC,GAAOb,IAAca,EAAGC,MAE9CC,IAAgBC,EAAAA,EAAAA,MAEjBF,EAAKC,EAAaE,IAAI,OAEtB,QAAEC,IAAYC,EAAAA,EAAAA,MAEZC,KAAMC,IAAgBC,EAAAA,EAAAA,GAC1B,CAACR,EAAII,GACLK,EAAAA,IAkEJ,MAAO,CACHC,gBAhEoB,SAACC,GAAiC,IAADC,EAAAC,EAAA,IAA7BC,EAAaC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAIT,EAAIS,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAE9CN,GAAGA,EAAEO,iBAEP,MAAMC,EAAc,OAAJb,QAAI,IAAJA,EAAAA,EAAQC,EAElBa,EAAa,CACfhB,QAASe,EAAQnB,GAAGqB,MAAM,KAAK,GAC/BF,QAASA,EAAQA,QACjBG,MAAoB,QAAfV,EAAEO,EAAQG,aAAK,IAAAV,EAAAA,EAAIO,EAAQI,OAAO,GACvCC,KAAML,EAAQK,KACdC,WAAYN,EAAQM,WACpBzB,GAAImB,EAAQnB,GACZ0B,MAAOP,EAAQO,MACfC,SAA0B,QAAlBd,EAAEM,EAAQQ,gBAAQ,IAAAd,EAAAA,EAAI,EAC9Be,YAAgBd,GAAiBA,EAAcE,OAASF,EAAce,QAAO,CAACC,EAAKC,IAASD,EAAMC,EAAKL,MAAQK,EAAKJ,UAAU,GAAK,EACnIb,cAAgBA,GAAiBA,EAAcE,OAAUF,OAAgBG,GAG7E,IAAK,OAADN,QAAC,IAADA,OAAC,EAADA,EAAGqB,kBAAkBC,gBAAiB,CAEtC,MAAMC,EAAW,IAAIC,SAASxB,EAAEqB,QAEhC,IAAK,IAAKI,EAAKC,KAAUH,EAASI,UAC9BlB,EAAWgB,GAAOC,CAI1B,CACAlD,EAAUiC,GACV1B,IACA6C,YAAW,KACP7C,GAAa,GACd,KACP,EA+BI8C,eA7BmBA,CAACrB,EAASsB,KAE7B,MAAMrB,EAAa,CACfhB,QAASe,EAAQnB,GAAGqB,MAAM,KAAK,GAC/BF,QAASA,EAAQA,QACjBG,MAAOH,EAAQI,OAAO,GACtBC,KAAML,EAAQK,KACdC,WAAYN,EAAQM,WACpBzB,GAAImB,EAAQnB,GACZ0B,MAAOP,EAAQO,OAGnB,GAAIe,EAAK,CACL,MAAMP,EAAW,IAAIC,SAASM,EAAIC,SAElC,IAAK,IAAKN,EAAKC,KAAUH,EAASI,UAC9BlB,EAAWgB,GAAOC,CAE1B,CAEA9C,EAAS6B,GACTxB,IACA2C,YAAW,KACP3C,GAAW,GACZ,KAAK,EAMRC,QAER,C,gICpFe,SAAS8C,IAEpB,MAAM,SAAEnD,EAAQ,cAAEoD,EAAa,iBAAEC,EAAgB,iBAAEC,IAAqBrD,EAAAA,EAAAA,MAClE,gBAAEiB,IAAoBqC,EAAAA,EAAAA,KAI5B,OACIC,EAAAA,EAAAA,KAAA,WAAShD,GAAG,YAAWiD,UAEnBD,EAAAA,EAAAA,KAAA,OAAKE,UAAU,cAAaD,UACxBD,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWD,UAGtBD,EAAAA,EAAAA,KAACG,EAAAA,EAAe,CAACC,KAAK,OAAOC,SAAS,EAAMJ,SACvCzD,EAASwB,OAAS,GAAIgC,EAAAA,EAAAA,KAACM,EAAAA,EAAgB,CAAAL,UAGpCD,EAAAA,EAAAA,KAAA,MAEIE,UAAU,0BAAyBD,SAClCzD,EAAS+D,KAAKxD,IACXyD,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CAERtC,QAASpB,EAAGkD,SAAA,EAGZD,EAAAA,EAAAA,KAACU,EAAAA,EAAQ,CACLvC,QAASpB,EACT8C,iBAAkBA,EAClBC,iBAAkBA,EAClBF,cAAeA,KAEnBI,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAACC,QAAUjD,IAClBA,EAAEkD,kBACFnD,EAAgBC,EAAG,KAAM,IAAKZ,EAAI4B,SAAU5B,EAAG4B,UAAW,EAC5DsB,SAAC,yGAbElD,EAAGC,SANf,SA0BagD,EAAAA,EAAAA,KAACM,EAAAA,EAAgB,CAAAL,UAEnCD,EAAAA,EAAAA,KAAA,MAAIE,UAAU,cAAaD,SAAC,oJADvB,mBAajC,C,0DC/DO,MAAMxD,GAAeqE,EAAAA,EAAAA,IACxBC,EAAAA,EAAAA,KACI,CAACC,EAAK7D,KAAG,CACLX,SAAU,GAEVF,WAAayC,IACTiC,GAAK3E,IAKD,GAJsBA,EAAMG,SAASM,MAChCC,GAAOA,EAAGC,KAAO+B,EAAK/B,KASpB,CAIH,MAAO,CAAER,SAHeH,EAAMG,SAAS+D,KAAKxD,GACxCA,EAAGC,KAAO+B,EAAK/B,GAAK,IAAKD,EAAI4B,SAAU5B,EAAG4B,SAAW,GAAM5B,IAGnE,CANI,MAAO,CAAEP,SAJe,IACjBH,EAAMG,SACT,IAAKuC,EAAMJ,SAAU,IAQ7B,GACF,EAGNiB,cAAgBqB,IACZD,GAAK3E,IAIM,CAAEG,SAHeH,EAAMG,SAAS0E,QAClCnC,GAASA,EAAK/B,KAAOiE,OAG5B,EAGNpB,iBAAmBoB,IACfD,GAAK3E,IAIM,CAAEG,SAHeH,EAAMG,SAAS+D,KAAKxD,GACxCA,EAAGC,KAAOiE,EAAS,IAAKlE,EAAI4B,SAAU5B,EAAG4B,SAAW,GAAM5B,OAGhE,EAGN+C,iBAAkBA,CAACmB,EAAQtC,KACvBqC,GAAK3E,IACD,IAAI8E,EAAkB,GAYtB,OAVIA,EADa,IAAbxC,EACkBtC,EAAMG,SAAS0E,QAC5BnC,GAASA,EAAK/B,KAAOiE,IAGR5E,EAAMG,SAAS+D,KAAKxD,GAClCA,EAAGC,KAAOiE,EACJ,IAAKlE,EAAI4B,SAAUyC,KAAKC,IAAI,EAAGtE,EAAG4B,SAAW,IAC7C5B,IAGP,CAAEP,SAAU2E,EAAiB,GACtC,KAKV,CACI3C,KAAM,cACN8C,WAAYA,IAAMC,e","sources":["hooks/useProductActions.js","pages/FavoritesPage/FavoritesSections.js","stores/favStore.js"],"sourcesContent":["import useSWRImmutable from \"swr/immutable\";\nimport { userCartStore } from \"../stores/cartStore\";\nimport { userFavStore } from \"../stores/favStore\";\nimport { modalStore } from \"../stores/modalStore\";\nimport { getItem } from \"../db/loadData\";\nimport { useParams } from \"react-router-dom\";\nimport { useSearchParams } from \"react-router-dom\";\nfunction useProductActions(productId) {\n    const addToCart = userCartStore((state) => state.addProduct);\n    const { addProduct: addToFav, products } = userFavStore();\n    const { toggleAdded } = modalStore();\n    const { toggleFav } = modalStore();\n    const isFav = products.some((el) => productId === el.id)\n\n    const [searchParams] = useSearchParams()\n\n    const id = searchParams.get(\"id\")\n\n    const { catalog } = useParams()\n\n    const { data: productData } = useSWRImmutable(\n        [id, catalog],\n        getItem\n    );\n\n    const handleAddToCart = (e, configuration = [], data) => {\n\n       if(e) e.preventDefault()\n\n        const product = data ?? productData\n\n        const newProduct = {\n            catalog: product.id.split('_')[1],\n            product: product.product,\n            image: product.image ?? product.images[0],\n            name: product.name,\n            collection: product.collection,\n            id: product.id,\n            price: product.price,\n            quantity: product.quantity ?? 0,\n            priceConfig:  ((configuration && configuration.length)? configuration.reduce((sum, item) => sum + item.price * item.quantity, 0) : 0),\n            configuration: (configuration && configuration.length) ? configuration : undefined\n        };\n\n        if (e?.target instanceof HTMLFormElement) {\n \n            const formData = new FormData(e.target);\n\n            for (let [key, value] of formData.entries()) {\n                newProduct[key] = value;\n    \n            }\n\n        }\n        addToCart(newProduct);\n        toggleAdded();\n        setTimeout(() => {\n            toggleAdded();\n        }, 1500);\n    };\n\n    const handleAddToFav = (product, ref) => {\n\n        const newProduct = {\n            catalog: product.id.split('_')[1],\n            product: product.product,\n            image: product.images[0],\n            name: product.name,\n            collection: product.collection,\n            id: product.id,\n            price: product.price,\n        };\n\n        if (ref) {\n            const formData = new FormData(ref.current);\n\n            for (let [key, value] of formData.entries()) {\n                newProduct[key] = value;\n            }\n        }\n\n        addToFav(newProduct);\n        toggleFav();\n        setTimeout(() => {\n            toggleFav();\n        }, 1500);\n    };\n\n    return {\n        handleAddToCart,\n        handleAddToFav,\n        isFav\n    };\n}\n\nexport default useProductActions;\n","\nimport './favorites.css'\nimport { userFavStore } from '../../stores/favStore';\nimport { AnimatePresence } from 'framer-motion';\nimport SmoothAppearance from '../../components/ui/SmoothAppearance';\nimport CartItem from '../../components/Cart/CartItem/CartItem';\nimport MainButton from '../../components/ui/buttons/MainButton/MainButton';\nimport CartWrapper from '../../components/Cart/CartItem/CartWrapper';\nimport useProductActions from '../../hooks/useProductActions';\nexport default function FavoritesSections() {\n\n    const { products, removeProduct, increaseQuantity, decreaseQuantity } = userFavStore();\n    const { handleAddToCart } = useProductActions()\n\n\n\n    return (\n        <section id='favorites'>\n\n            <div className='center-flex'>\n                <div className='container'>\n\n\n                    <AnimatePresence mode=\"wait\" initial={false}>\n                        {products.length > 0 ? <SmoothAppearance\n\n                            key={\"list\"}>\n                            <ul\n\n                                className=\"fav-items column gap-40\">\n                                {products.map((el) => (\n                                    <CartWrapper\n                                        key={el.id}\n                                        product={el}\n                                    >\n\n                                        <CartItem\n                                            product={el}\n                                            increaseQuantity={increaseQuantity}\n                                            decreaseQuantity={decreaseQuantity}\n                                            removeProduct={removeProduct}\n                                        />\n                                        <MainButton onClick={(e) => {\n                                            e.stopPropagation()\n                                            handleAddToCart(e, null, { ...el, quantity: el.quantity })\n                                        }}>\n                                            добавить в корзину\n                                        </MainButton>\n\n                                    </CartWrapper>\n                                ))}\n                            </ul>\n                        </SmoothAppearance> : <SmoothAppearance\n                            key={'no-found'}>\n                            <h5 className=\"text-center\">\n                                у вас нет избранных товаров\n                            </h5>\n                        </SmoothAppearance>}\n                    </AnimatePresence>\n\n\n                </div>\n            </div>\n\n        </section>\n    )\n}\n","import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\n\nexport const userFavStore = create(\n    persist(\n        (set, get) => ({\n            products: [],\n\n            addProduct: (item) => {\n                set((state) => {\n                    const productExists = state.products.some(\n                        (el) => el.id === item.id\n                    );\n\n                    if (!productExists) {\n                        const updatedProducts = [\n                            ...state.products,\n                            { ...item, quantity: 1 },\n                        ];\n                        return { products: updatedProducts };\n                    } else {\n                        const updatedProducts = state.products.map((el) =>\n                            el.id === item.id ? { ...el, quantity: el.quantity + 1 } : el\n                        );\n                        return { products: updatedProducts };\n                    }\n                });\n            },\n\n            removeProduct: (itemId) => {\n                set((state) => {\n                    const updatedProducts = state.products.filter(\n                        (item) => item.id !== itemId\n                    );\n                    return { products: updatedProducts };\n                });\n            },\n\n            increaseQuantity: (itemId) => {\n                set((state) => {\n                    const updatedProducts = state.products.map((el) =>\n                        el.id === itemId ? { ...el, quantity: el.quantity + 1 } : el\n                    );\n                    return { products: updatedProducts };\n                });\n            },\n\n            decreaseQuantity: (itemId, quantity) => {\n                set((state) => {\n                    let updatedProducts = []\n                    if (quantity === 1) {\n                        updatedProducts = state.products.filter(\n                            (item) => item.id !== itemId\n                        );\n                    } else {\n                        updatedProducts = state.products.map((el) =>\n                            el.id === itemId\n                                ? { ...el, quantity: Math.max(1, el.quantity - 1) }\n                                : el\n                        );\n                    }\n                    return { products: updatedProducts };\n                });\n            },\n\n\n        }),\n        {\n            name: \"fav-storage\",\n            getStorage: () => localStorage,\n        }\n    )\n);\n"],"names":["productId","addToCart","userCartStore","state","addProduct","addToFav","products","userFavStore","toggleAdded","modalStore","toggleFav","isFav","some","el","id","searchParams","useSearchParams","get","catalog","useParams","data","productData","useSWRImmutable","getItem","handleAddToCart","e","_product$image","_product$quantity","configuration","arguments","length","undefined","preventDefault","product","newProduct","split","image","images","name","collection","price","quantity","priceConfig","reduce","sum","item","target","HTMLFormElement","formData","FormData","key","value","entries","setTimeout","handleAddToFav","ref","current","FavoritesSections","removeProduct","increaseQuantity","decreaseQuantity","useProductActions","_jsx","children","className","AnimatePresence","mode","initial","SmoothAppearance","map","_jsxs","CartWrapper","CartItem","MainButton","onClick","stopPropagation","create","persist","set","itemId","filter","updatedProducts","Math","max","getStorage","localStorage"],"sourceRoot":""}